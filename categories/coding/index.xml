<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>コーディング on 047</title>
    <link>https://zeroshina.jp/categories/coding/</link>
    <description>Recent content in コーディング on 047</description>
    <generator>Hugo</generator>
    <language>ja</language>
    <copyright>© 047</copyright>
    <lastBuildDate>Wed, 21 Aug 2024 00:00:00 +0900</lastBuildDate>
    <atom:link href="https://zeroshina.jp/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>入れ子構造になった.zipファイルをPowerShellで解消する</title>
      <link>https://zeroshina.jp/tips/powershell-resolve-nested-zip/</link>
      <pubDate>Wed, 21 Aug 2024 00:00:00 +0900</pubDate>
      <guid>https://zeroshina.jp/tips/powershell-resolve-nested-zip/</guid>
      <description>&lt;p&gt;PCでよく作業をする方であれば、一度は入れ子になった.zipファイルを見かけたことがあるのではないでしょうか。解凍すると &lt;strong&gt;[フォルダA] / [フォルダA] / [ファイル]&lt;/strong&gt;  …みたいになっているアレです。&lt;/p&gt;&#xA;&lt;p&gt;あれは単一のフォルダを指定して圧縮を行うと発生します。ツール側が選択したファイル数に関わらずフォルダにまとめてしまうからですね。（そのためフォルダではなく中身を全指定することで回避可能）&lt;/p&gt;&#xA;&lt;p&gt;さて、単に解凍して使う分には気にならない入れ子構造ですが、複数の.zipファイルをまとめて解凍したり、あるいは保管しておく際には、この入れ子の有無が混在することに微妙な歯がゆさを感じることもあります。&lt;/p&gt;&#xA;&lt;p&gt;そんな塵のような思いが積み重なって山となり、先日とうとう.zipファイルの入れ子を一括で取り除く処理が欲しくなってしまいました。&lt;/p&gt;&#xA;&lt;p&gt;という訳で今回は、「&lt;strong&gt;入れ子構造の.zipをそうでない.zipに変換するPowershellスクリプト&lt;/strong&gt;」の記事となります。なお、私はその日初めてPowerShellを触りましたので、&lt;strong&gt;スクリプトの品質について全く保障できません&lt;/strong&gt;。完全自己責任でどうぞ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UE5.4 Game Animation サンプルでVRMファイルを動かす手順</title>
      <link>https://zeroshina.jp/tips/ue5-vrm-game-animation-sample/</link>
      <pubDate>Mon, 12 Aug 2024 00:00:00 +0900</pubDate>
      <guid>https://zeroshina.jp/tips/ue5-vrm-game-animation-sample/</guid>
      <description>&lt;p&gt;Unreal Engineでは、モーションマッチングを使用したアニメーションのサンプルプロジェクトとして『&lt;a href=&#34;https://www.unrealengine.com/marketplace/ja/product/game-animation-sample&#34;&#xD;&#xA;  &#xD;&#xA;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Game Animation サンプル&lt;/a&gt;』が配布されています。&lt;/p&gt;&#xA;&lt;p&gt;これはキャラクターを自然なアニメーションで操作できるプロジェクトで、さらに操作キャラを任意のモデルに変更することも出来ます。自作モデルの動作確認や配布されているモデルの鑑賞などに役立ちそうですね。&lt;/p&gt;&#xA;&lt;p&gt;という訳で、本記事はこのプロジェクトでvrmファイルを動かすまでの手順をまとめたものになります。vrmと銘打ってはいますが、&lt;a href=&#34;https://ruyo.github.io/VRM4U/04_import/&#34;&#xD;&#xA;  &#xD;&#xA;  target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VRM4Uのなんでもインポート&lt;/a&gt;機能によりpmxファイル等でも動作します。ありがたい…！&lt;/p&gt;</description>
    </item>
    <item>
      <title>svgファイルを正規表現で置換して最適化する</title>
      <link>https://zeroshina.jp/tips/svg-regex/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0900</pubDate>
      <guid>https://zeroshina.jp/tips/svg-regex/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://zeroshina.jp/blog/2024-01-20-sfic/&#34;&#xD;&#xA;  &#xD;&#xA;  &gt;アイコンアセット&lt;/a&gt;を制作した時のお話。&lt;/p&gt;&#xA;&lt;p&gt;配布用のsvgファイルを出力した際、空のグループやガイド画像の参照まで書き出されてしまったため、これをテキストエディタの正規表現で置換する方法を残しておきます。&lt;/p&gt;&#xA;&lt;p&gt;本当はツール側で出力内容を制御したいところですが、私の環境ではその手段がなく、かといって出力の度に不要なレイヤーを消すのも手間なので…少数のファイルであればweb上の最適化ツールで事足りそうですが、今回は沢山のファイルを処理したかったのでこの方法を採りました。&lt;/p&gt;&#xA;&lt;p&gt;ただし、私は正規表現やsvgに関して全くの素人です。他のフォーマットや環境での動作は保証できませんし、「自分のところでは動いたからヨシ！」という精神で記事を書いています。そのためバックアップは必ず取り、自己責任でのご利用をお願いします。&lt;/p&gt;&#xA;&lt;p&gt;なお、私の使用したエディタはSublime Text 3になります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HugoでUnity WebGLを表示する</title>
      <link>https://zeroshina.jp/tips/hugo-unity-shortcode/</link>
      <pubDate>Wed, 15 Nov 2023 00:00:00 +0900</pubDate>
      <guid>https://zeroshina.jp/tips/hugo-unity-shortcode/</guid>
      <description>&lt;p&gt;もう半年以上前の話になりますが、WordpressからHugoにサイトを移行した際、Unityコンテンツを移植する必要がありました。&lt;/p&gt;&#xA;&lt;p&gt;慣れないHugoと解凍エラーで苦労したものの、無事Unityコンテンツの表示に成功、さて記事を書くぞという段階で放置してしまっていたので、今更ながらきちんと記事にして残しておこうと思います。&lt;/p&gt;&#xA;&lt;p&gt;手順としては適切なビルド設定をした上で、Unity公式のWebGLテンプレートを流用してショートコードを作るだけの単純なものとなっております。使用したツールのバージョンは以下の通り。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hugo: v0.120.4&lt;/li&gt;&#xA;&lt;li&gt;Unity: 2022.3.11f1  (LTS)&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
